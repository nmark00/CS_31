1. 

#include "Tire.h"
{
	class Auto
	{
		public:
		Auto();
		void drive(int amount);
		private:
		Tire frontL, frontR, rearL, rearR;
	}
};
#endif

#include "Auto.h"
Auto::Auto(Tire fL,fR,rL,rR)
{
	frontL=fL;
	frontR=fR;
	rearL=rL;
	rearR=rR;
}
void Auto::drive(int amount)
{
	frontL.roll(amount);
	frontR.roll(amount);
	rearL.roll(amount);
	rearR.roll(amount);
}



2.

struct Candy{string kind; string maker; double cost; };

Candy c;
c.kind= "snkicker's bar";
c.maker= "Mar's";
c.cost= "1.25";
cout<< c.kind <<" " << c.maker<< " "<<c.cost;

Candy *cptr= &c;
cout<< cptr ->kind << " "<< cptr -> maker <<" "<<cptr->cost;

3.

#include "Athlete.h"
{
	class Rower: public Athlete
	{
		public:
		Rower( string name);
		void play();
		
		private:
		string mname;
	}
};

Rower::Rower( string name) :mname=name
{
	void Rower::play()
	{
		cout<< "Ready All Row!";
	}
}

4.

if(x<=-9 || x>=9)
	return true;

5.

f(x==-8 || (x>=-2 && x<=2) || x>=11 )
	return true;

6.

"->" is used when the pointer is pointing to a member of an object. it is equivalent to doing (*pointerVariable).member
"." is used more generally, beyond just pointer variables. It is used such that the object is refering to a member of that object
In Candy, the pointer was pointing to the members of the structure, so I could use the "->" syntax. But when the object c is refering it's members, it must use "." since it is not a pointer variable type.
"::" is used when an object is referring to a member of the class, as opposed to an object.

7.

Automatic variables are local variables often declared in functions. They lifespan starts and finishes when the function is called. Memory is allocated only when its function is called, then is deleted once its function is finished.
Dynamic variables include pointers. They are created when we initialize them with "new", and can have their memory allocation changed throughout the program. Memory can be freed by using "delete" on the pointer variable.

8.

String comparison of "<" and ">"  convert the strings into doubles, and essentially compares the strings aphebetically such that uppercase letters are less than lowercase and A<B.

9.

int studentID, grade;
void studentIDReader(int num1)
{
	studentID = num1/100;
	grade = num1- studentID;
}

10.

double fundraiser( string rowerString)
{
    if(!isValidRowerString(rowerString))
    {
        return 0;
    }
    
    int mDistance = totalDistance(rowerString)/1000;
    double mStrokes=0;
    if(strokesPerMinute(rowerString)>20)
    {
        mStrokes=strokesPerMinute(rowerString) * elapsedMinutes(rowerString);
        
        mStrokes += strokesPerMinute(rowerString) * elapsedSeconds(rowerString) / 60;
    }
    mStrokes *= .5;
    
    if(heartRate(rowerString)>150)
    {
        mStrokes +=1;
    }
    
    return( mDistance + mStrokes );
}

11.

if( kind == Ticket::OPERA )
	price=75;

12.

int Pig::humanPlay( int amount )
    {
    	int temp=amount;
        amount= mHuman.roll(amount);
                
        mBoard.setHumanTurn(); //human's turn in Board
        mBoard.setRolledValue(amount); //set the rolled value to be the die
        mBoard.setHumanScore(amount); //update human score to be the die
        
        if(temp==amount)
			return -1;
        return( amount );
    }

// Driver Code:
case 'r':
case 'R':
    human = game.humanPlay();
    cout << "human rolled:" << human << endl;
    if (human == 1)
    {
        game.humanEndTurn();
        display( game );
        do
        {
            if (handleComputerPlay( game ))
                break;
        } while (game.computerKeepRolling());
        game.computerEndTurn();
        display( game, message, true );
    }
    if(human == -1)
    {
    	game.humanEndTurn();
        display( game );
        do
        {
            if (handleComputerPlay( game ))
                break;
        } while (game.computerKeepRolling());
        game.computerEndTurn();
        display( game, message, true );
    }
    break;

13.**

int& is the location of the int's memory, whereas int* creates a pointer variable that points to some location of an int.
You can walk an array using (*int +i)

14.

The number of parameters determines which method is invoked

15.

What portions of a class Foo can be called by a public method of the class Foo? -All  

What portions of a class Foo can be called by a private method of the class Foo?  -All

What portions of a class Foo can be called by using the object f by the operation void Bar::b( Foo f ) ?  - only public parts

What portions of a class Foo can be called by using the object f by the operation void Bar::c( const Foo & f ) ?	-only public or const parts